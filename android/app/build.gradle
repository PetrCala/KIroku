apply plugin: "com.android.application"
apply plugin: "com.facebook.react"


/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/react-native-codegen
    // codegenDir = file("../node_modules/react-native-codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    debuggableVariants = ["developmentDebug", "stagingDebug", "productionDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}


project.ext.envConfigFiles = [
    productionDebug: ".env.production",
    productionRelease: ".env.production",
    stagingDebug: ".env.staging",
    stagingRelease: ".env.staging",
    developmentDebug: ".env.development",
    developmentRelease: ".env.development",
]


/**
 * Set this to true to create four separate APKs instead of one,
 * one for each native architecture. This is useful if you don't
 * use App Bundles (https://developer.android.com/guide/app-bundle/)
 * and want to have separate APKs to upload to the Play Store.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Private function to get the list of Native Architectures you want to build.
 * This reads the value from reactNativeArchitectures in your gradle.properties
 * file and works together with the --active-arch-only flag of react-native run-android.
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}


android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace "com.alcohol_tracker"
    defaultConfig {
        applicationId "com.alcohol_tracker"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1000030403
        versionName "0.3.4-3"
        vectorDrawables.useSupportLibrary = true
    }

    flavorDimensions "default"
    productFlavors {
        // we need to define a production flavor but since it has default config, we can leave it empty
        production
        staging {
            // If  are building a version that won't be uploaded to the play store, we don't have to use production keys
            // applies all non-production flavors
            applicationIdSuffix ".staging"
            signingConfig signingConfigs.debug
            resValue "string", "build_config_package", "com.alcohol_tracker"
        }
        development {
            // If  are building a version that won't be uploaded to the play store, we don't have to use production keys
            // applies all non-production flavors
            applicationIdSuffix ".dev"
            signingConfig signingConfigs.debug
            resValue "string", "build_config_package", "com.alcohol_tracker"
        }
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include (*reactNativeArchitectures())
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file(MYAPP_UPLOAD_STORE_FILE)
            storePassword System.getenv('MYAPP_UPLOAD_STORE_PASSWORD')
            keyAlias MYAPP_UPLOAD_KEY_ALIAS
            keyPassword System.getenv('MYAPP_UPLOAD_KEY_PASSWORD')
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            // productFlavors.production.signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"

            signingConfig null
            // buildTypes take precedence over productFlavors when it comes to the signing configuration,
            // thus we need to manually set the signing config, so that the e2e dev env uses the debug config again.
            // In other words, the signingConfig setting above will be ignored when we build the flavor in release mode. 
            productFlavors.all { flavor ->
                // All release builds should be signed with the release config ...
                flavor.signingConfig signingConfigs.release
            }
            // ... except for the development (originally e2e) flavor, which we maybe want to build locally:
            productFlavors.development.signingConfig signingConfigs.debug
        }
    }

   // Dynamically select the correct .env file
    // applicationVariants.all { variant ->
    //     def buildType = variant.buildType.name
    //     def flavorName = variant.flavorName
    //     // Construct the key for the env file based on the variant
    //     def envFileKey = "${flavorName}${buildType.capitalize()}"
    //     def envFile = project.ext.envConfigFiles[envFileKey]
    //     if (envFile == null) {
    //         throw GradleException("No .env configuration found for ${envFileKey}")
    //     }
    //     println("Using env file: $envFile")
    //     // Here you set the path for the dotenv.gradle to find
    //     project.ext.set("ENVFILE", envFile)
    // }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.0.0")

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle" // Load the .env file
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)