name: Build and deploy android and iOS clients

# This workflow is run when a release or prerelease is created
on:
  release:
    types: [prereleased, released]

env:
  # SHOULD_DEPLOY_PRODUCTION: ${{ github.event.action == 'released' }}
  SHOULD_DEPLOY_PRODUCTION: false # For now, production deploys are manual

concurrency:
  group: ${{ github.workflow }}-${{ github.event.action }}
  cancel-in-progress: true

jobs:
  validateActor:
    runs-on: ubuntu-latest
    outputs:
      IS_DEPLOYER: ${{ fromJSON(steps.isUserDeployer.outputs.IS_DEPLOYER) || github.actor == 'KirokuAdmin' }}
    steps:
      - name: Check if user is deployer
        id: isUserDeployer
        # This could check a group in Kiroku, but as we are not an entrerprise yet, only KirokuAdmin can deploy
        run: |
          echo "IS_DEPLOYER=false" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.KIROKU_ADMIN_TOKEN }}

  # Note: we're updating the checklist before running the deploys and assuming that it will succeed on at least one platform
  deployChecklist:
    name: Create or update deploy checklist
    uses: ./.github/workflows/createDeployChecklist.yml
    if: ${{ github.event.action != 'released' }}
    needs: validateActor
    secrets: inherit

  android:
    # WARNING: getDeployPullRequestList depends on this job name. do not change job name without adjusting that action accordingly
    name: Build and deploy Android
    needs: validateActor
    if: ${{ fromJSON(needs.validateActor.outputs.IS_DEPLOYER) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: ./.github/actions/composite/setupNode

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: '17'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1.190.0
        with:
          bundler-cache: true

      - name: Decrypt keystore
        run: cd android/app && gpg --quiet --batch --yes --decrypt --passphrase="$LARGE_SECRET_PASSPHRASE" --output kiroku-play-key.keystore kiroku-play-key.keystore.gpg
        env:
          LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - name: Decrypt json key
        run: cd android/app && gpg --quiet --batch --yes --decrypt --passphrase="$LARGE_SECRET_PASSPHRASE" --output android-fastlane-json-key.json android-fastlane-json-key.json.gpg
        env:
          LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - name: Create the .env files
        run: |
          echo "${{ secrets.STAGING_ENV_FILE }}" > .env.staging
          echo "${{ secrets.PRODUCTION_ENV_FILE }}" > .env.production

      - name: Set version in ENV
        run: echo "VERSION_CODE=$(grep -o 'versionCode\s\+[0-9]\+' android/app/build.gradle | awk '{ print $2 }')" >> "$GITHUB_ENV"

      - name: Run Fastlane
        run: bundle exec fastlane android ${{ fromJSON(env.SHOULD_DEPLOY_PRODUCTION) && 'production' || 'beta' }}
        env:
          RUBYOPT: '-rostruct'
          MYAPP_UPLOAD_STORE_PASSWORD: ${{ secrets.MYAPP_UPLOAD_STORE_PASSWORD }}
          MYAPP_UPLOAD_KEY_PASSWORD: ${{ secrets.MYAPP_UPLOAD_KEY_PASSWORD }}
          VERSION: ${{ env.VERSION_CODE }}

      # - name: Upload Android build to Browser Stack
      #   if: ${{ !fromJSON(env.SHOULD_DEPLOY_PRODUCTION) }}
      #   run: curl -u "$BROWSERSTACK" -X POST "https://api-cloud.browserstack.com/app-live/upload" -F "file=@./android/app/build/outputs/bundle/productionRelease/app-production-release.aab"
      #   env:
      #     BROWSERSTACK: ${{ secrets.BROWSERSTACK }}

      - name: Upload Android sourcemaps to GitHub Release
        if: ${{ !fromJSON(env.SHOULD_DEPLOY_PRODUCTION) }}
        run: gh release upload ${{ github.event.release.tag_name }} android/app/build/generated/sourcemaps/react/productionRelease/index.android.bundle.map#android-sourcemap-${{ github.event.release.tag_name }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Upload Android build to GitHub Release
        if: ${{ !fromJSON(env.SHOULD_DEPLOY_PRODUCTION) }}
        run: gh release upload ${{ github.event.release.tag_name }} android/app/build/outputs/bundle/productionRelease/app-production-release.aab
        env:
          GITHUB_TOKEN: ${{ github.token }}

      # - name: Warn deployers if Android production deploy failed
      #   if: ${{ failure() && fromJSON(env.SHOULD_DEPLOY_PRODUCTION) }}
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: custom
      #     custom_payload: |
      #       {
      #         channel: '#deployer',
      #         attachments: [{
      #           color: "#DB4545",
      #           pretext: `<!subteam^S4TJJ3PSL>`,
      #           text: `💥 Android production deploy failed. Please manually submit ${{ github.event.release.tag_name }} in the <https://play.google.com/console/u/0/developers/8765590895836334604/app/4973041797096886180/releases/overview|Google Play Store>. 💥`,
      #         }]
      #       }
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  iOS:
    # WARNING: getDeployPullRequestList depends on this job name. do not change job name without adjusting that action accordingly
    name: Build and deploy iOS
    needs: validateActor
    if: ${{ fromJSON(needs.validateActor.outputs.IS_DEPLOYER) }}
    env:
      DEVELOPER_DIR: /Applications/Xcode_15.2.0.app/Contents/Developer
    runs-on: macos-13
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        id: setup-node
        uses: ./.github/actions/composite/setupNode

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1.190.0
        with:
          bundler-cache: true

      - name: Cache Pod dependencies
        uses: actions/cache@v4
        id: pods-cache
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-cache-${{ hashFiles('ios/Podfile.lock', 'firebase.json') }}

      - name: Compare Podfile.lock and Manifest.lock
        id: compare-podfile-and-manifest
        run: echo "IS_PODFILE_SAME_AS_MANIFEST=${{ hashFiles('ios/Podfile.lock') == hashFiles('ios/Pods/Manifest.lock') }}" >> "$GITHUB_OUTPUT"

      - name: Install cocoapods
        uses: nick-fields/retry@3f757583fb1b1f940bc8ef4bf4734c8dc02a5847
        if: steps.pods-cache.outputs.cache-hit != 'true' || steps.compare-podfile-and-manifest.outputs.IS_PODFILE_SAME_AS_MANIFEST != 'true' || steps.setup-node.outputs.cache-hit != 'true'
        with:
          timeout_minutes: 10
          max_attempts: 5
          command: scripts/pod-install.sh

      - name: Decrypt AppStore profile
        run: cd ios && gpg --quiet --batch --yes --decrypt --passphrase="$LARGE_SECRET_PASSPHRASE" --output Kiroku.mobileprovision Kiroku.mobileprovision.gpg
        env:
          LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - name: Decrypt certificate
        run: cd ios && gpg --quiet --batch --yes --decrypt --passphrase="$LARGE_SECRET_PASSPHRASE" --output Certificates.p12 Certificates.p12.gpg
        env:
          LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - name: Decrypt App Store Connect API key
        run: cd ios && gpg --quiet --batch --yes --decrypt --passphrase="$LARGE_SECRET_PASSPHRASE" --output ios-fastlane-json-key.json ios-fastlane-json-key.json.gpg
        env:
          LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - name: Create the .env files
        run: |
          echo "${{ secrets.STAGING_ENV_FILE }}" > .env.staging
          echo "${{ secrets.PRODUCTION_ENV_FILE }}" > .env.production

      - name: Set iOS version in ENV
        run: echo "IOS_VERSION=$(echo '${{ github.event.release.tag_name }}' | tr '-' '.')" >> "$GITHUB_ENV"

      - name: Run Fastlane
        run: bundle exec fastlane ios ${{ fromJSON(env.SHOULD_DEPLOY_PRODUCTION) && 'production' || 'beta' }}
        env:
          APPLE_CONTACT_EMAIL: ${{ secrets.APPLE_CONTACT_EMAIL }}
          APPLE_CONTACT_PHONE: ${{ secrets.APPLE_CONTACT_PHONE }}
          APPLE_DEMO_EMAIL: ${{ secrets.APPLE_DEMO_EMAIL }}
          APPLE_DEMO_PASSWORD: ${{ secrets.APPLE_DEMO_PASSWORD }}
          VERSION: ${{ env.IOS_VERSION }}

      # - name: Upload iOS build to Browser Stack
      #   if: ${{ !fromJSON(env.SHOULD_DEPLOY_PRODUCTION) }}
      #   run: curl -u "$BROWSERSTACK" -X POST "https://api-cloud.browserstack.com/app-live/upload" -F "file=@/Users/runner/work/App/App/kiroku.ipa"
      #   env:
      #     BROWSERSTACK: ${{ secrets.BROWSERSTACK }}

      - name: Upload iOS sourcemaps to GitHub Release
        if: ${{ !fromJSON(env.SHOULD_DEPLOY_PRODUCTION) }}
        run: gh release upload ${{ github.event.release.tag_name }} main.jsbundle.map#ios-sourcemap-${{ github.event.release.tag_name }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Upload iOS build to GitHub Release
        if: ${{ !fromJSON(env.SHOULD_DEPLOY_PRODUCTION) }}
        run: gh release upload ${{ github.event.release.tag_name }} /Users/runner/work/App/App/kiroku.ipa
        env:
          GITHUB_TOKEN: ${{ github.token }}

      # - name: Warn deployers if iOS production deploy failed
      #   if: ${{ failure() && fromJSON(env.SHOULD_DEPLOY_PRODUCTION) }}
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: custom
      #     custom_payload: |
      #       {
      #         channel: '#deployer',
      #         attachments: [{
      #           color: "#DB4545",
      #           pretext: `<!subteam^S4TJJ3PSL>`,
      #           text: `💥 iOS production deploy failed. Please manually submit ${{ env.IOS_VERSION }} in the <https://appstoreconnect.apple.com/apps/1530278510/appstore|App Store>. 💥`,
      #         }]
      #       }
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # postSlackMessageOnFailure:
  #   name: Post a Slack message when any platform fails to build or deploy
  #   runs-on: ubuntu-latest
  #   if: ${{ failure() }}
  #   needs: [android, desktop, iOS, web]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Post Slack message on failure
  #       uses: ./.github/actions/composite/announceFailedWorkflowInSlack
  #       with:
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  # postSlackMessageOnSuccess:
  #   name: Post a Slack message when all platforms deploy successfully
  #   runs-on: ubuntu-latest
  #   if: ${{ success() }}
  #   needs: [android, iOS]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Set version
  #       run: echo "VERSION=$(npm run print-version --silent)" >> "$GITHUB_ENV"

  #     - name: 'Announces the deploy in the #announce Slack room'
  #       uses: 8398a7/action-slack@v3
  #       with:
  #         status: custom
  #         custom_payload: |
  #           {
  #             channel: '#announce',
  #             attachments: [{
  #               color: 'good',
  #               text: `🎉️ Successfully deployed ${process.env.AS_REPO} <https://github.com/PetrCala/Kiroku/releases/tag/${{ env.VERSION }}|${{ env.VERSION }}> to ${{ fromJSON(env.SHOULD_DEPLOY_PRODUCTION) && 'production' || 'staging' }} 🎉️`,
  #             }]
  #           }
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  #     - name: 'Announces the deploy in the #deployer Slack room'
  #       uses: 8398a7/action-slack@v3
  #       with:
  #         status: custom
  #         custom_payload: |
  #           {
  #             channel: '#deployer',
  #             attachments: [{
  #               color: 'good',
  #               text: `🎉️ Successfully deployed ${process.env.AS_REPO} <https://github.com/PetrCala/Kiroku/releases/tag/${{ env.VERSION }}|${{ env.VERSION }}> to ${{ fromJSON(env.SHOULD_DEPLOY_PRODUCTION) && 'production' || 'staging' }} 🎉️`,
  #             }]
  #           }
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  #     - name: 'Announces a production deploy in the #kiroku-open-source Slack room'
  #       uses: 8398a7/action-slack@v3
  #       if: ${{ fromJSON(env.SHOULD_DEPLOY_PRODUCTION) }}
  #       with:
  #         status: custom
  #         custom_payload: |
  #           {
  #             channel: '#kiroku-open-source',
  #             attachments: [{
  #               color: 'good',
  #               text: `🎉️ Successfully deployed ${process.env.AS_REPO} <https://github.com/PetrCala/Kiroku/releases/tag/${{ env.VERSION }}|${{ env.VERSION }}> to production 🎉️`,
  #             }]
  #           }
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  postGithubComment:
    name: Post a GitHub comment when platforms are done building and deploying
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    needs: [android, iOS]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: ./.github/actions/composite/setupNode

      - name: Set version
        run: echo "VERSION=$(npm run print-version --silent)" >> "$GITHUB_ENV"

      - name: Get Release Pull Request List
        id: getReleasePRList
        uses: ./.github/actions/javascript/getDeployPullRequestList
        with:
          TAG: ${{ env.VERSION }}
          GITHUB_TOKEN: ${{ secrets.KIROKU_ADMIN_TOKEN }}
          IS_PRODUCTION_DEPLOY: ${{ fromJSON(env.SHOULD_DEPLOY_PRODUCTION) }}

      - name: Comment on issues
        uses: ./.github/actions/javascript/markPullRequestsAsDeployed
        with:
          PR_LIST: ${{ steps.getReleasePRList.outputs.PR_LIST }}
          IS_PRODUCTION_DEPLOY: ${{ fromJSON(env.SHOULD_DEPLOY_PRODUCTION) }}
          DEPLOY_VERSION: ${{ env.VERSION }}
          GITHUB_TOKEN: ${{ secrets.KIROKU_ADMIN_TOKEN }}
          ANDROID: ${{ needs.android.result }}
          IOS: ${{ needs.iOS.result }}
