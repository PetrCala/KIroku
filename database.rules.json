{
  "rules": {
    "beta_keys": {
      ".read": true,
      ".write": "auth.token.admin === true",
      "$key": {
        ".validate": "newData.hasChildren()",
        ".write": "auth != null"
      }
    },
    "config": {
      ".read": true,
      ".write": "auth.token.admin === true"
    },
    "feedback": {
      ".read": "auth.token.admin === true",
      ".write": "auth.token.admin === true",
      "$feedback_id": {
        ".validate": "newData.val() === null || newData.hasChildren(['submit_time', 'text', 'user_id'])",
        ".write": "auth != null"
      }
    },
    "nickname_to_id": {
      ".read": "auth != null",
      ".write": "auth.token.admin === true",
      "$display_key": {
        "$uid": {
          ".validate": "newData.isString() || newData.val() === null",
          ".write": "auth.uid === $uid"
        }
      }
    },
    "user_current_session": {
      ".read": "auth.token.admin === true",
      ".write": "auth.token.admin === true",
      "$uid": {
        ".validate": "newData.hasChild('current_session_id') || newData.val() === null",
        ".read": "auth != null && (auth.uid === $uid || root.child('users').child(auth.uid).child('friends').child($uid).exists())",
        ".write": "auth != null && auth.uid === $uid",
        "current_session_id": {
          ".validate": "newData.isString()",
          ".write": false,
          ".read": false
        }
      }
    },
    "user_drinking_sessions": {
      ".read": "auth.token.admin === true",
      ".write": "auth.token.admin === true",
      "$uid": {
        ".validate": "newData.val() === null || newData.hasChildren()",
        ".read": "auth != null && (auth.uid === $uid || root.child('users').child(auth.uid).child('friends').child($uid).exists())",
        ".write": "auth != null && auth.uid === $uid"
      }
    },
    "user_preferences": {
      ".read": "auth.token.admin === true",
      ".write": "auth.token.admin === true",
      "$uid": {
        ".validate": "newData.val() === null || newData.hasChildren()",
        ".read": "auth != null && (auth.uid === $uid || root.child('users').child(auth.uid).child('friends').child($uid).exists())",
        ".write": "auth != null && auth.uid === $uid",
        "first_day_of_week": {
          ".validate": "newData.isString() && (newData.val() === 'Monday' || newData.val() === 'Sunday')"
        },
        "units_to_colors": {
          ".validate": "newData.hasChildren(['yellow', 'orange'])"
        },
        "units_to_points": {
          ".validate": "newData.hasChildren(['beer', 'cocktail', 'other', 'strong_shot', 'weak_shot', 'wine'])"
        }
      }
    },
    "user_unconfirmed_days": {
      ".read": "auth.token.admin === true",
      ".write": "auth.token.admin === true",
      "$uid": {
        ".validate": "newData.val() === true || newData.val() === null",
        ".read": "auth != null  && auth.uid === $uid",
        ".write": "auth != null && auth.uid === $uid"
      }
    },
    "users": {
      "$uid": {
        ".validate": "newData.val() === null || newData.hasChildren()",
        ".read": "auth != null && auth.uid === $uid",
        ".write": "auth != null && auth.uid === $uid",
        "friends": {
          ".validate": "newData.val() === null || newData.hasChildren()",
          ".read": "auth != null",
          "$friend_uid": {
            ".validate": "(newData.val() === true || newData.val() === null) && $uid != $friend_uid && ($uid === auth.uid || $friend_uid === auth.uid)",
            ".write": "auth != null && root.child('users').child($uid).exists()"
          }
        },
        "friend_requests": {
          ".validate": "newData.val() === null || newData.hasChildren()",
          "$request_id": {
            ".validate": "(($uid === auth.uid && newData.val() === 'sent') || ($request_id === auth.uid && newData.val() === 'received') || newData.val() === null) && $uid != $request_id",
            ".write": "auth != null && root.child('users').child($uid).exists()"
          }
        },
        "profile": {
          ".validate": "newData.val() === null || newData.hasChildren(['photo_url', 'display_name'])",
          ".read": "auth != null",
          "photo_url": {
            ".validate": "newData.isString()"
          },
          "display_name": {
            ".validate": "newData.isString()"
          }
        }
      }
    }
  }
}